Code

Part 1 (Supersonic Inlet)
M1 = 3.2;
M4 = 1.3;
Mach_numbers = [3.2; 0; 0; 0];
gamma = 1.4;
num_shocks = 4; 
initial_angle = 18; % minimum shock angle
Increment = 0.1; % angle increment
end_angle = 50; % end angle

syms B T M 
Theta = atand((2*cotd(B)*((M^2)*(sind(B)^2)-1))/(2+((gamma + cosd(2 * B))* M^2))); Pressure_ratio = (1+(2*gamma*(((M*sind(B))^2)-1)/(gamma+1)))^(-1/(gamma-1)) * ((gamma+1)*((M*sind(B))^2)/((gamma-1)*((M*sind(B))^2)+2)) ^(gamma/(gamma-1)); Mach_number = sqrt((2+(gamma-1) * (M^2)*(sind(B)^2))/((sind(B-T)^2) * (2*gamma*(M^2)*(sind(B)^2)-(gamma-1))));


beta_angles = (initial_angle:Increment:end_angle);


m = 1;
for X_grid = initial_angle : Increment : end_angle
    for i = 1 : 1 : (num_shocks-1) 
        if i == 1
            Mach_numbers(1,m) = 3.2;
        end

        % Using Vpa solver
        theta_angles (i,m) = vpa(subs(Theta,[B,M],[beta_angles(i,m),Mach_numbers(i,m)]),3);
        Mach_numbers(i+1,m) = vpa(subs(Mach_number,[B,M,T],[beta_angles(i,m),Mach_numbers(i,m),theta_angles(i,m)]),3);
        Pressure_ratios(i,m) = vpa(subs(Pressure_ratio,[B,M],[beta_angles(i,m),Mach_numbers(i,m)]),3);
        
        
        if i == 3 
            Pressure_ratios(i+1,m) = vpa(subs(Pressure_ratio,[B,M],[90,Mach_numbers(i+1,m)]),3);
            
            break
        end

        beta_angles(i+1,m) = asind(Mach_numbers(i,m)*sind(beta_angles(i,m))/(Mach_numbers(i+1,m)));

    end

    if Mach_numbers(4,m)<M4-0.01
        break
    end

    m = m + 1;
end


M_ends = abs(Mach_numbers(4,:) - M4);
M_ends = M_ends == min(M_ends(:));

[X_grid,Y_grid] = ndgrid(1:size(Mach_numbers(4,:),1),1:size(Mach_numbers(4,:),2));
y = Y_grid(M_ends);

P_recov = Pressure_ratios(1,y) * Pressure_ratios(2,y)*Pressure_ratios(3,y)*Pressure_ratios(4,y);


Part1 = double([Mach_numbers(1,y);beta_angles(1,y);theta_angles(1,y);Pressure_ratios(1,y);0])
Second_part = double([Mach_numbers(2,y);beta_angles(2,y);theta_angles(2,y);Pressure_ratios(2,y);0])
Third_part = double([Mach_numbers(3,y);beta_angles(3,y);theta_angles(3,y);Pressure_ratios(3,y);0])
Fourth_Part = double([Mach_numbers(4,y);0;0;Pressure_ratios(4,y);P_recov])

Part 2 (Parametric cycle Analysis)


cruise_altitude = 21000; % metres
[T_ambient, a, P_ambient, rho_ambient] = atmosisa(cruise_altitude); % K , M/S , Pa , KG/M^3

M_ambient = 3.2;
M1 = M_ambient;

Cp = 1.005;
R =  287;
ga_mma = 1.4;
g = 9.8;

U1 = M1 * a;

LD_ratio = 7.5;

% pressure ratios
P02_01 = 0.9322;
P03_02 = 0.9322;
P04_03 = 0.9788;
P01 = P_ambient * ((1 + ((ga_mma-1) / 2) * M1^2) ^ (ga_mma/(ga_mma-1)));

% Max takeoff and Landing weight respectively
m1 = 245847; % kg
m2 = 115031; % kg
ma = 280; % kg/s
mf = m1 - m2; 

QR = 43000 * 1000;  % Kerosene fuel QR
T04 = 1800;


% Efficiency
b_efficiency = 0.95;
n_efficiency = 0.98;
d_efficiency = 0.79;


T01 = T_ambient * (1 + ((ga_mma - 1)/2) * M_ambient^2);


% Diffuser Assumptions
P03 = P04_03;
% P_ambient = Poa;


% Combustion Assumptions
% negligible heat loss over the inlet,
T03 = T_ambient;


% Nozzle Assumptions
% Negligible heat transfer in the nozzle
T07 = T04
% Nozzle is perfectly expanded so Pe = Pambient
% P7 = Pambient


a -> 03 (Diffuser)

% overall stagnation pressure ratio for the engine
overall_stag_press = d_efficiency * b_efficiency * n_efficiency;


% mf = m1 - m2;
% Me = sqrt((2/(ga_mma - 1))((1+((ga_mma - 1)/2)m1^2)(pi_d * pi_b * pi_n * (P_ambient/Pexit)^((ga_mma-1)/ga_mma)))-1);


03 -> 04 Combustion
f = ((T04/T03) - 1) / ((b_efficiency * QR)/(Cp * T03)) - (T04/T03);

04 -> 07 Nozzle
M7 = sqrt((2 / (ga_mma - 1)) * ((1+((ga_mma-1)/2)* M1^2) * (overall_stag_press)^((ga_mma - 1) / ga_mma)- 1));
disp (M7);

U7 = M7 * sqrt((ga_mma * R * T07)/(1 + ((ga_mma-1)/2) * M7^2));
disp (U7);

T7 = T07 * ((1 + ((ga_mma - 1) / 2) * M7^2)^-1);
disp (T7);
Performance
Thrust = abs(ma * ((1+f) * U7 - U1));
disp (Thrust);

TSFC = abs(mf / Thrust) * 10^-4;
disp (TSFC);

thermal_efficiency = ((1 + f) * (U7^2/2) - (U1^2/2)) / (f * QR);
disp (thermal_efficiency *1000);

propulsive_efficiency = abs((Thrust * U1) / (ma*((1 + f) * (U7^2 / 2) - (U1^2 / 2))));
disp (propulsive_efficiency * 10);

overall_efficiency = propulsive_efficiency * thermal_efficiency;
disp (overall_efficiency * 1000);
% Range
engine_Range = overall_efficiency * (LD_ratio) * (QR/g) * log(m1/m2);
disp (engine_Range);

STOP HERE
